Changes made to branch 4.16 on 2017/07/10:

General:
- Added extra inputs for Action Mappings AttackLeft (left mouse button), AttackRight (right mouse button), DefenseLeft (left mouse button) and DefenseRight (right mouse button).

- Added the CycleElements Action Mapping, bound to Tab key.

- Added the LeftSelected (Q key) and RightSelected (E key) Action Mappings.

Blueprint Classes:
- BP_MPMotionController:
      Changed functions ActivateSpell and DeactivateSpell, Category Spell, to no longer set bWantsToCast variable.

- MotionControllerPawn:
      Added macro IsInSilenceMode, Category Spell Casting, which checks if BP_MotionController variable CastStatus is not set to Silence.

- BP_BasicAttack:
      Added events ClientVisualFire, ClientVisualEarth, ClientVisualWind and ClientVisualWater; they are all multicast RPCs and replicate the charge visual effects for each element.
      Added macro ChangeFireEffect, Category Default, to correct the negative scale issues of the left hand when on the client.
      Added event ClientPlayExplosionAndSound which is a multicast RPC to replictate the sound and visual effects when the spell fails.

- BP_MPMotionControllerPawn:
      Added variables:
        No VR Controls:
            LeftSelected => Boolean (default = True)
            RightSelected => Boolean (default = False)
      Modified event ServerSpawnHand; no longer a server only RPC.
      Modified hands spawn process: 
        *ServerSpawnHand no longer is called only by the local player; to maintain its server spawn status, only the authority is allowed to call it.
      Modified the overrided event Tick to no longer update the replicated variables LeftControllerTrans, RightControllerTrans and PlayerBodyTrans.
      Modified the overrided event BeginPlay; now sets a timer to loop every 0.05 seconds and replicate the variables LeftControllerTrans, RightControllerTrans and PlayerBodyTrans.
      Modified the basic attack system:
        *no longer has the tutorial Gate.
        *initiating the attack and casting it are now done by server only RPCs that take BP_MPMotionController variables; this eliminates redunduncy due to having a left and right systems
        *can now be used when no HMD is connected and only the correct hand can cast the attack
        *now sets the BP_MPMotionController variable CastStatus to the correct ECastStatus value when None
        *now uses a new macro to cast the spell which takes an ECastStatus variable and a BP_MPMotionController variable
      Added event ServerInitiateAttack, a server only RPC which takes a BP_MPMotionController variable and an EElementSelected variable and charges the basic attack of the element passes to it.
      Added event ServerCastAttack, a server only RPC which takes a BP_MPMotionController variable and casts the attack.
      Added event ClientInitiateCast, a multicast RPC which takes a BP_MPMotionController variable and sets its bWantsToCast variable to True.
      Added event ClientEndCast, a multicast RPC which takes a BP_MPMotionController variable and sets its bWantsToCast variable to False.
      Modified macro ActivateAttack, Category Spell Casting; no it is called Activate spell, takes both an ECastStatus variable and a BP_MPMotionController 
        variable and no longer sets the BP_MPMotionController CastStatus variable when the spell was successful.
      Modified the basic defense system:
        *no longer has the tutorial Gate
        *casting the shield is done from a server only RPC which takes a BP_MPMotionController variable; this eliminates redunduncy due to having systems for both hands
        *can now be used when no HMD is connected and only the correct hand can cast the attack
        *now sets the BP_MPMotionController variable CastStatus to the correct ECastStatus value when None
        *now uses a new macro to cast the spell which takes an ECastStatus variable and a BP_MPMotionController variable
      Added event ServerCastShield, a server only RPC which takes a BP_MPMotionController variable and an EElementSelected variable and creates a shield of the correct element.
      Modified event SwapShield; now it is a server only RPC taking a BP_MPMotionController variable and an EElementSelected variable.
      Added event ClientVibration, a server only RPC, taking a BP_MPMotionController variable and seting the hands to shake after a delay of 0.3 seconds.
      Modified hit system:
        *shaking and visual update of the health bar is now done through multicast RPCs
        *life is updated through an event
        *when conditions for game over are met, a server only RPC is called to let the server now
      Added event UpdateLife, which takes two Integer variable (the Life varibale the damage value from the hit).
      Added event ClientVibrateCameraAndControllers which is a multicast RPC that activates force feedback on the affected Pawns.
      Added event ClientUpdatePlayerState which is a multicast RPC that takes an Integer variable (the Life variable) and updates the health bar; it also checks if the game is over.
      Added event ServerEndMatch, a server only RPC which sets IsGameOver to True when game over conditions are met.
      Added Input events for Tab key for both the left hand and right hand; cycles through the elements on the selected hand when tab is pressed.
      Added Input events for Q and E keys; when Q is pressed, LeftSelected variable is set to True and RightSelected is set to False; E is the oposite.
      Modified Input event MouseY to avoid inverting vertical axis when on the client.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/06:

General:
- Added new map NoVR_MainMenu which displays the MainMenu widget blueprint.

- Added support for OnlineSubsystemSteam in the DefaultEngine.ini file. This is what allows one to play in Lan or online.

- Added blueprint widget classes MainMenu, HostMenu, ServerMenu, LoadingScreen, ServerRow and ErrorDialog.

Blueprint widgets
- ErrorDialog:
      Added variables:
        Default:
            OkButton => UMG Button
            Message => Text (bound to UMG Text)
      Added OnClicked event for OkButton; displays MainMenu widget.
      Added get and set functions for Message.

- ServerRow:
      Added variables:
        Default:
            ServerSelectionButton => UMG Button
            SearchResults => BlueprintSessionResult (holds the session created when searched for it in the ServerMenu blueprint widget)
            PlayerCounts => Text
      Added function SetServerSearchResult, Category Default; it sets SearchResults and PlayerCounts.
      Added binding functions for UMG Text Server Name, UMG Text Player Count and UMG Text Ping.
      Added OnClicked event for ServerSelectionButton; calls MyGameInstance event JoinServer.

- ServerMenu:
      Added variables:
        Default:
            BackButton => UMG Button
            RefreshButton => UMG Button
            ScrollingServers => UMG ScrollBox (displays found sessions)
            StatusText => Text
            StatusVisibility => ESlateVisibility
            RefreshButtonEnabled => Boolean (default = false; determines when the refresh button can be used)
            FoundSessionWidgets => array of ServerRow blueprint widget (sessions to be displayed)
            FoundSessions => array of BlueprintSessionResult (the actual sessions found)
      Added function ClearPreviousResults, Category Default.
      Added binding function for status messages content; uses StatusText.
      Added binding function for status messages visibility; uses StatusVisibility.
      Added binding function for RefreshButtonEnabled.
      Added macro RefreshServers which clears previous results and performs new searches and disable RefreshButton when searching.
      Added Onclicked event for each UMG Button; BackButton just returns to MainMenu and Refresh calls the macro RefreshServers.
      Overrided event Contruct simply calls RefreshServers.

- HostMenu:
      Added variables:
        Server Settings:
            ServerNameText => Text (not used when connecting via blueprint)
            MaxPlayers => Integer (default = 2)
            NumberOfPlayers => Integer (default = 2)
            EnableAccept => Boolean (default = true; does not change as the AcceptButton is to be always enabled)
        Default:
            UserServerName => UMG TextBox (not used when connecting via blueprint)
            DecreasePlayers => UMG Button (decreases NumberOfPlayers value when clicked; minimum 0)
            IncreasePlayers => UMG Button (increases NumberOfPlayers value when clicked; maximum 2)
            BackButton => UMG Button
            AcceptButton => UMG Button
            GameInstanceReference => MyGameInstance 
      Overrided event Contruct gets used GameInstance and sets GameInstanceReference to its reference.
      Added Onclicked event for BackButton; shows MainMenu.
      Added Onclicked event for AcceptButton; calls MyGameInstance event HostMatchEvent with the defined setting.
      Added Onclicked event for DecreasePlayers.
      Added Onclicked event for IncreasePlayers.
      Added OnTextChanged event for UserServerName; not used.
      Added binding function GetNumberOfPlayersText; converts NumberOfPlayers to Text.

- MainMenu:
      Added variables:
        Default:
            FindButton => UMG Button
            HostButton => UMG Button
            QuitButton => UMG Button
            ToggleLanButton => UMGButton
            GameInstanceReference => MyGameInstance 
      Overrided event Contruct gets used GameInstance and sets GameInstanceReference to its reference.
      Added Onclicked events for all buttons; FindButton shows ServerMenu, HostButton shows HostMenu, QuitButton quits 
        the game and ToggleLanButton changes MyGameInstance variable EnableLan to true or false.

Blueprint Classes:
- MyGameInstance:
      Added variables:
        Server Settings:
            EnableLan => Boolean (default = true)
            ServerName => Text (not used for anything for now)
            MaxPlayers => Integer (default = 2)
        Widgets:
            MainMenuWB => MainMenu blueprint widget
            HostMenuWB => HostMenu blueprint widget
            ServerMenuWB => ServerMenu blueprint widget
            ServerRowWB => ServerRow blueprint widget
            LoadingScreenWB => LoadingScreen blueprint widget
            ErrorDialogWB => ErrorDialog blueprint widget
      Added events to display each of the new blueprint widget classes.
      Added macro DisplayErrorMessage which displays ErrorDialog widget and sets the error message.
      Added HostMatchEvent event which creates a multiplayer session.
      Added JoinServer which joins a created session.
      Overrided NetworkError from GameInstance; handles network errors.
      Overrided TravelError from GameInstance; handles travel errors.
      Added NetErrorToText pure function to get network error code and create a text out of it.
      Added TravelErrorToText pure function to get travel error code and create a text out of it.

- MPMotionControllerPawn
      Added variables:
        Replication:
            LeftControllerTrans => Transform (replicated with notify)
            RightControllerTrans => Transform (replicated with notify)
            PlayerBodyTrans => Transform (replicated with notify)
      Modified variables:
        Controllers:
            LeftController: now replicates
            RightController: Now is a BP_MPMotionController and replicates
      Changed all references to BP_MotionController to BP_MPMotionController when dealing with the RightController.
      Changed function SetInitialConditions; initial elements are no longer set in the function (casting is disabled to avoid problems)
      Changed ServerStartMatch RPC; hands are silenced now by default.
      Modified hands spawn process: 
        *now uses SwitchOnDevices to decide if it is using the HMD or not
        *hands now spawn on the server and the RPC can only be called if caller is locally controlled
      Added ServerSpawnHand RPC (server only) which spawns the hands
      Added function AttachHands, Category Network, which attaches hands to MotionControllerL or R if HMD is in use or the PlayerBody; called from ServerSpawnhand.
      Added ServerGetLocationsAndRotations RPC (server only); sets the replicated transforms
      Added function UpdateServer, Category Network, which passes the transforms of MotionControllerl and R and PlayerBody, when the pawn is locally 
        controlled, to ServerGetLocationsAndRotations RPC.
      Added functions OnRep for LeftControllerTrans, RightControllerTrans and PlayerBodyTrans; when the pawn is not locally controlled, set the new position and rotation.

- BP_MPMotionController:
      Now replicates.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/05:

General:
- Added new map MultiplayerArena with two oposing PlayerStart objects; nothing in the level blueprint runs now.

- GoogleVR and SimpleHMD are disabled by default; used when playing whithout the HMD (testing only).

- Option to start in VR disabled by default now; option located in Project Settings -> Description -> Settings.

- Added Blueprint classes MultiplayerGM (GameMode child), MultiplayerGameState, (GameState child), MotionController_PC (PlayerController child),
  MotionController_PlayerState (PlayerState child), Multiplayer_PanelText_BP (PanelText_BP child), 
  Multiplayer_MotionControllerPawn (Pawn child) e Multiplayer_BP_MotionController (Actor child).

Blueprint classes:
- MultiplayerGM: 
     Added variables:
         Player Spawning:
           Player1 => Array of PlayerStart
           Player2 => Array of PlayerStart
           CurrentPlayerStartTransform => Transform (used when spawning the text for each player)
         Player Login:
           PlayerControllerList => Array of MotionController_PC
           InvertedIterator => Integer (server to iterate PlayerControllerList backwards)
           WaitingToStartMessage => Text (default = "Waiting for other player to join.")
         Match Start:
           Countdown => Integer
           StartFight => Float (defautl = 10.0)
         Defaut:
           MaxPlayers => Integer
     Added RespawnPlayerEvent event for spawning each player using PlayerStart; this is a RPC that runs only on the server.
     Added OnPostLogin event calling the spawning event and the CLientPostLogin event from the MotionController_PC.
     Overrided HandleStartingNewPlayer from GameModeBase; this server to fill MotionController_PC array with each PlayerController used in the match.
     Added event SetPlayerTarget which sets the replicated Multiplayer_MotionControllerPawn variable EnemyTarget for each player.
     Added InProgressEvent which sinchronizes the countdown to the start of the match and allow the players to cast spells when the match starts (not working yet).
     Overrided OnSetMatchState from GameMode; when MatchState (GameMode inherited) is InProgress set the target for each player prepare to start the match; 
       when match has ended, handles silencing the players and displaying messages for the loser and winner.
     Added PostMatchEvent which disables casting for each player and displays "You are victorious!" for the winner and "You are defeated!" for the loser.
     Overrided functions ReadyToStartMatch and ReadyToEndMatch from GameMode, Category Game; the first checks is all players have joined the match and the second returns 
       the MultiplayerGameState variable GameIsOver.
     Added function InProgressGameMessageCreator, Category Default, to set the countdown message to MotionController_PC replicated variable MatchFlowMessage.

- MultiplayerGameState:
      Added variables:
          Default:
            GameIsOver => Boolean (default = false)
      Overrided Tick event which only ever runs when GameState variable MatchState is InProgress and sets GameIsOver to true if any MotionController_PlayerState reports defeat.

- MotionController_PC:
      Added variables:
          Default:
            GameText => Multiplayer_PanelText_BP (holds a reference to the spawned Multiplayer_PanelText_BP instance)
            MatchFlowMessage => Text (replicated with Notify)
      Added function OnRep_MatchFlowMessage, Category Default, to set Multiplayer_PanelText_BP variable WinLoseText (inherited from PanelText_BP).
      Added function AreYAndYawZero, Category Game Text.
      Added function CreateGameTextTransform, Category Game Text, which gets the Pawn transform to determine the direction the text should be facing.
      Added ClientPostLogin event, which takes the Pawn transform when it was spawned and uses it to spawn Multiplayer_PanelText_BP.

- MotionController_PlayerState:
      Added variables:
          Default:
            PlayerIsDefeated => Boolean (default = false)

- Multiplayer_PanelText_BP:
      Overrided BeginPlay event which now sets visibility of the text, its color and its content.
      Overrided Tick event which sets the content of the text.

- Multiplayer_MotionControllerPawn:
      Modified variables:
          Game Over:
            IsGameOver: now replicates with Notify
      Added two MotionController components.
      Implemented MouseX and MouseY axis input events; camera can be moved with mouse now (GoogleVR and SimpleHMD plugins must be disabled).
      Added ClientStartMatch multicast event; allows players to cast spells.
      Added ClientEndMatch multicast event; disables casting.
      Added function OnRep_IsGameOver, Category Default, which sets MotionController_PlayerState variable PlayerIsDefeated to true when it is true.
      Multiplayer_MotionControllerPawn now accepts PlayerController Yaw and Pitch movement.
      Multiplayer_MotionControllerPawn no longer replicates its movement by default.
