Changes made to branch 4.16 on 2017/11/10:

Note: There were changes to C++ code. COMPILE AFTER PULLING THIS COMMIT.

General:
- Voice added to the project. Done using OnlineSubsystem variables (in DefaultEngine.ini file) bHasVoiceEnabled=true, PollingIntervalInMs=20 and 
   VoiceNotificationDelta=0.2; Voice variable bEnabled=true; GameSession variable (in Defaultgame.ini file) bRequiresPushToTalk=false.

Blueprint widgets:
- ServerRow_VR:
      Modified function pure GetServerName; now checks if BP_SteamGameInstance variable EnableLan is true. If true, returns "LanGame" as the session name, else, uses the original algorithm.
      Modified overrided event OnCliecked for ServerSelectionButton; now checks if BP_SteamGameInstance variable EnableLan is true. If true, sets USteamgameInstance variable
       GameSessionName = "LanGame". If false, uses the original algorithm.

- WBP_HostMenuVR:
      Modified overrided event OnClicked for AcceptButton; now calls BP_SteamGameInstance event HostGame passing "LanGame" as the server name directly. 
       This is now the default name for Lan sessions.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/11/10:

Blueprint classes:
- Lobby_GM:
      Modified event ResetMatch; now bound event Restart calls the Delay node before calling the event ResetGM.

- MultiplayerGM:
      Modified event ResetMatch; now bound event Restart calls the Delay node before calling the event ResetGM.
      Modified event ResetGM: now destroys the pawn controlled by a player's PC before clearing PlayerControllerList.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/11/10:

Notes
- New C++ files added to the project. Must be compiled again.

General:
- Added C++ header file ECOBasePlayerController.h, which contains the class AECOBasePlayerController.

C++ classes:
- AECOBasePlayerController: will write a wiki for it ASAP.

Bluerpint classes:
- Dummy_BP: 
      Modified PlayerBoddy component; no longer visible when in play.

- MotionControllerPawn:
      Modified overrided event InputAxisMouseX; it is now enabled again.
      Modified overrided event InputAxisMouseY; it is now enabled again.

- MPMotionControllerPawn:
      Modified DefaultSceneRoot component; it is movable now.

- Lobby_GM:
      Modified overrided event HandleStartingNewPlayer; while disabled at the moment, it will set AECOBasePlayerController boolean variable bIsInLobby to true.

- MotionController_PC: now child of C++ class AECOBasePlayerController.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/11/09:

General:
- Added input extra input for Action Mapping StartGame (left mouse button).

Blueprint classes:
- Lobby_GM:
      Added variables:
        Default:
            LoadedList => TArray of booleans (one boolean for each PC in the PlayerControllerList, used to avoid calling a rpc more than once)
            InProgressTimer => timer handle (holds the timer set in InProgressEvent)
      Modified event InProgressEvent; now sets a timer that runs 10 times per second checking if every players' pawns have been fully loaded; when it is, just unsilence that player.
      Modified event PostMatchEvent; now waits 5 seconds before executing so that if two players enter the map too close to each other they are still 
       loaded correctly; also clears InProgressTimer.
      Modified event ResetMatch; now no longer waits 10 seconds before initiating ServerTravel to MultiplayerArena.
      Modified event ResetGM; now destroys the PCs' pawns before clearing PlayerControllerList.

- BP_SteamGameInstance:
      Modified overrided event NetworkError; no longer calls DestroySessionCaller after macro DisplayErrorMessage.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/11/03:

General:
- Many little comments for Thiago to read and understand better how to fully integrate my changes.

Blueprint classes:
- MPMotionControllerPawn:
      Added variables:
        Default:
            HasFullyLoaded => boolean (set to true when the basic visual stuff, i. e. the hands and the head, in the pawn have been fully loaded; used in Lobby_GM; default = false)
      Modified overrided event BeginPlay; now sets HasFullyLoaded to true after the last Delay node.

Blueprint widgets:
- WBP_MainNetworkVRMenu:
      Modified overrided event OnClicked for QuitButton; now when vr is not active, sets USteamGameInstance variable bIsQuitting and calls DestroySessionCaller; this lets the 
       session system clear any session and then quit the game.

===================================================================================================================================================================
Changes made to branch SteamMatchmaking on 2017/11/01:

Blueprint classes:
- BP_SteamGameInstance:
      Added variables:
        Default:
            IsVR_NotActive => boolean (determines if we are using a menu which is VR friedly or not; default = false)
      Modified all events Show<some menu>Menu to take a boolean IsNotVR which determines if the widget should be added to viewport or not (adds it if true).
      Added a note for Thiago regarding the important FName variables inherited from USteamGameInstance that are exposed to BP.

- MPMotionControllerPawn:
      Added overrided input event for D key; calls the BP_SteamGameInstance event DetroySessionCaller to destroy the session from the multiplayer match (this is for testing only).

Maps:
- NoVR_MainMenu:
      Modified overrided event BeginPlay; now also sets BP_SteamGameInstance variable IsVR_NotActive to true.

===================================================================================================================================================================
Changes made to branch SteamMatchmaking on 2017/10/31:

General:
- Added C++ header files SteamGameInstance.h and MainMenuGM.h; SteamGameInstance.h contains dynamic multicast delegates, the struct FCustomBPSessionResult and the class USteamGameInstance.

- Added blueprint class BP_SteamGameInstance, derived from C++ class USteamGameInstance.

- Added blueprint widget class QuickMatchMenu.

- Added matchmaking functionality to the game (note: while a QuickMatchMenu was added, it is not functional and prone to breaking; matchmaking functionality was 
  added to blueprint widget class ServerMenu)

- Modified how the game quits; now it clean whatever sessions still exist before quitting.

- Added LobbyRoom and associated Lobby_GM and Dummy_BP blueprint classes

C++ classes:
- USteamGameInstance: check wiki for description

C++ structs:
- FCustomBPSearchResult: (Blueprint type)
      Added variables:
        Public:
          Not exposed to BP:
              SessionResultInternal => FOnlineSessionSearchResult session search result      

Maps:
- LoadingMap:
      Modified overrided event BeginPlay; the GameInstance class used now is BP_SteamGameInstance.

- NoVR_MainMenu:
      Modified overrided event BeginPlay; the GameInstance class used now is BP_SteamGameInstance.

Blueprint classes:
- Lobby_GM: functionality almost identical to MultiplayerGM; this is so players in the LobbyRoom can move to the match correctly, using the functionality already in place.
      Modified event SetPlayerTarget; while in MultiplayerGM this event sets the opposite pawn as the target, in this class it sets a Dummy_BP as the target.
      Modified event InProgressEvent; while in MultiplayerGM this event begins the countdown timer and calls the multicast rpc ClientStartMatch, from 
       MPMotionControllerPawn, this class just calls the rpc.

- Dummy_BP: only implements the GetTargetComponent from the BPI_IsTargetable blueprint interface.

- BP_SteamGameInstance:
      Added variables:
        Server Settings:
            EnableLan => Boolean (default = true)
            IsPresence => boolean (determines if steam uses lobby os server sessions; default = true; uses lobby then)
            MaxPlayers => Integer (default = 2)
        Widgets:
            MainMenuWB => MainMenu blueprint widget
            HostMenuWB => HostMenu blueprint widget
            ServerMenuWB => ServerMenu blueprint widget
            ServerRowWB => ServerRow blueprint widget
            LoadingScreenWB => LoadingScreen blueprint widget
            QuickMatchMenuWB => QuickMatchMenu blueprint widget
            ErrorDialogWB => ErrorDialog blueprint widget
            CurrentWB => User widget (parent to all widgets; used to correct a bug when displaying the error or loading screens)
      Added events to display each of the new blueprint widget classes.
      Added macro DisplayErrorMessage which displays ErrorDialog widget and sets the error message.
      Added HostMatchEvent event which creates a multiplayer session.
      Added JoinServer which joins a created session.
      Overrided NetworkError from GameInstance; handles network errors.
      Overrided TravelError from GameInstance; handles travel errors.
      Added NetErrorToText pure function to get network error code and create a text out of it.
      Added TravelErrorToText pure function to get travel error code and create a text out of it.

Blueprint widgets:
- QuickMatchMenu: not working and not used at the moment so no description necessary.

- MainMenu:
      Added variables:
        Default:
            IsLanEnabled => boolean (determines if the host button is enabled; default = false)
            QuickMatchButton => UMG Button
      Modified variables:
        Default:
            HostButton: now is bound to IsLanEnabled and disabled if lan is not used
      Added overrided event OnClicked for QuickMatchButton; removes whatever widget is on the viewport and calls the BP_SteamGameInstance event to display the QuickMatchMenu blueprint widget.
      Modified overrided event Construct; now the GameInstance class is cast to BP_SteamGameInstance.
      Modified overrided event OnClicked for QuitButton; now it sets the USteamGameInstance variable bIsQuitting (inherited by BP_SteamGameInstance) to true and call 
       the DestroySessionCaller event from BP_SteamGameInstance; this makes sure that only after all sessions are destroyed the game quits (not sure if it is 
       needed but feels safer this way).
      Modified overrided event OnCLicked for ToggleLanButton; now it also sets IsLanEnabled to the same value as BP_SteamGameInstance variable EnableLan when pressed.

- HostMenu:
      Modified overrided event Construct; now the GameInstance class is cast to BP_SteamGameInstance.
      Modified overrided event OnTextChanged for UserNameServer; it is active now.

- WBP_GameOver:
      Modified overrided event OnClicked for Button1; the GameInstance is now casted to BP_SteamGameInstance; also sets USteamGameInstance variable MainMenuMapName to 
       SwitchLevels and call DestroySessionCaller from BP_SteamGameInstance; this makes sure that when leaving the multiplayer match, the session is destroyed.
      Modified overrided event OnClicked for Button2; the GameInstance is now casted to BP_SteamGameInstance.

- ServerRow:
      Modified variables:
        Default:
            SearchResults: now it is of type CustomBPSessionResult 
        Modified function GetPing; now uses the USteamGameInstance static accessor GetPingInMs for FCustomBPSessionResult struct.
        Modified fucntion GetServerName; now uses the USteamGameInstance static accessor GetSessionName for FCustomBPSessionResult struct.
        Modified function GetPlayerCount; now uses the USteamGameInstance static accessors GetCurrentPlayers and GetMaxPlayers for FCustomBPSessionResult struct; 
         also creates the PlayerCounts text directly.
        Modified function SetServerSearchResults; now just sets SearchResults to the CustomBPSessionResult passed to this function.
        Modified overrided event OnClicked for ServerSelectionButton; the GameInstance is now casted to BP_SteamGameInstance and the USteamGameInstance variable GameSessionName 
         is set to the reult of a call to USteamGameInstance static accessor GetSessionName.

- ServerMenu:
      Modified variables:
        Default:
            FoundSessions: now it is of type CustomBPSessionResult        
      Modified how finding sessions is done; now the process is fully automated, in other words, matchmaking v1.0 is done.
      Added event SetFailMessage, bound to USteamGameInstance delegate OnfindSessionsNotSuccessful; this event sets StatusText to a fail to find session message 
       and calls BP_SteamGameInstance event HostGameEvent.
      Added event DisplaySessions, bound to USteamGameInstance delegate OnfindSessionsSuccessful; this event adds ServerRow buttons to the server list.
      Modified overrided event Construct; now first binds the USteamGameInstance delegates OnfindSessionsSuccessful and OnfindSessionsNotSuccessful before calling macro RefreshServers.
      Modified overrided event OnClicked for BackButton; the GameInstance is now casted to BP_SteamGameInstance; also the USteamGameInstance delegates OnfindSessionsSuccessful and 
       OnfindSessionsNotSuccessful before removing this widget from the viewport and displaying NoVR_MainMenu.
      Modified macro RefreshServers; now it only tries to find sessions, the process of adding them to the list is done by the event DisplaySessions.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/10/04:

General:
- Removed initialization of the GameNetworkManager from DefaultEngine.ini, since it was not there that it should have been done and there is another one.
- Added initialization of the NetDriver variables MaxClientRate=40000 and MaxInternetClientRate=40000. Some trippy effects with this config when moving 
   the head in non VR (only seen by the oponent).

Bluprint classes:
- MPMotionControllerPawn:
      Modified timer for movement update, set during BeginPlay execution. Now timer loops every 0.1 s.
      Changed NetPriority from 3 to 1.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/10/04:

Blueprint classes:
- BP_WaterBall:
      Modified event ServerSpawnWaterFromGround; now a multicast rpc taking a vector variable as the position of the server; also sets the ball mesh after 
       testing if the spawned object is valid.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/10/03:

General:
- Added initialization of GameNetworkManager properties TotalNetBandwidth=30000, MaxDynamicBandwidth=10000, MinDynamicBandwidth=5000; the explanation of what 
  they are is in the following link: https://answers.unrealengine.com/questions/353439/how-can-i-increase-network-bandwidth-limit.html.
  These change the bandwidth that are alocated for the server and client.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/08/09:

Blueprint classes:
- MotionControllerPawn:
      Modified the way both hands cast the basic attack; now checks if in silence mode before the combat mechanics algorithim in both press and release button. 
       Comments in the event should explain what was done.

- Multiplayer_GM: (note: this is for me to keep track of the changes)
      Modified event OnPostLogin; now no longer spawns the player pawns.
      Modified event HandleStartingNewPlayer; now does the spawning and calls the ClientPostLogin owning client only RPC from MotionController_PC.
      Modified event ResetGM; no longer resets the arrays for the playerstarts and the PC list.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/08/07:

General:
- Changes to the way the MultiplayerGM is notified of the state of the player in regards to restarting the match; now the setting is done in the MotionController_PC blueprint class.
- All reset done is not fully working, due to the fact that the match State Machine in the parent class GameMode is not resetted when Seamless Travel is enabled.
- Added map TransitionMap, which is necessary to use Seamless Travel.

Blueprint classes:
- MotionController_PlayerState:
      Modified variables:
        Default:
            CanRestartMatch: no longer replicates
      Added event ClientResetPlayerState, which sets both Boolean variables CanRestartMatch and PlayerIsDefeated to False.

- MultiplayerGameState:
      Returned WaitingPostMatch switch state to its original (read mine) form; Thiago's node has the possibility of setting Boolean variable RestartMatch to 
       True even if not all players had agreed to it; this would occur for both the server and client.
      Modified overrided Tick event; now sets its Boolean variables to False and calls ClientResetPlayerState from MotionController_PlayerState.

- MotionController_PC:
      Added variables:
        Default:
            IsReadyToRestart => Boolean (default value = False)
      Added event ServerNotifyIsReadyToRestart, a server only RPC, which sets the value of the Boolean variable IsReadyToRestart.
      Added overrided Tick event; when MatchRestart is set to True (done in WBP_GameOver) calls ServerNotifyIsReadyToRestart to set IsReadyToRestart to True.
      Added event ClientResetPC, a multicast RPC, to reset an instance of this class to its default state.

- MultiplayerGM:
      Removed variables: 
        Match Start:
            MatchRestartMessage: where it is set in code now sets WaitingToStartMessage
      Added event ResetGM; resets MultiplayerGM and calls MotionController_PC multicast RPC ClientResetPC.
      Modified overrided event OnSetMatchState; now sets Text variable WaitingToStartMessage before calling event InProgressEvent when in InProgress 
       switch state; added call to ResetGM in switch state LeavingMap.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/08/02:

General:
- Added blueprint widget classes ServerRowVR and MP_Button.

- Added blueprint class BP_MP_Button.

Maps:
- MenuRoom:
      Changes to map:
          Removed BP_InfoPanel.
          BP_MenuNetworking is no longer visible by default in gameplay.
      Added variables:
        Default:
            Multiplayer => BP_MP_Button (holds the multiplayer button so that not many modifications need to be done to the WBP_GameOver).
      Added a spawn function for BP_MP_Button in event BeginPlay.

Blueprint classes:
- BP_MPMotionController:
      Added variables:
          RiftVibrationTimeHandler => TimerHandle
      Added function PlayRiftVibration, Category Controller. See Thiago_ChangeLog, entry "Changes made to branch 4.16 on 2017/07/25" for details on what it does.
      Modified event SetShakeHands; see Thiago_ChangeLog, entry "Changes made to branch 4.16 on 2017/07/25" for details on what it does.

- MPMotioncontrollerPawn:
      Added function EnableWidgetInteraction, Category Interaction, to enable the WidgetInteraction component of a BP_MPMotioncontroller.

- MotionController_PC:
      Modified event ClientHandleEndOfMatch, owning client only RPC, to spawn a BP_GameOverUI object when the match has ended, enable interaction with it and set 
       the new map to load to NoVR_MainMenu (this is for testing; the map should be MenuRoom).

- MyGameInstance:
      Added variables:
        Default:
            IsVR_NotActive => Boolean (default value = False, if VR is not active we can set it to true to use k/b combination)
      Modified variables:
        Widgets:
            All widgets now are of the type that has VR in the name.
      Modified all Show<name of the menu>Menu events to take a Boolean that if true will assume that VR is not active and add the widget to the viewport.

- BP_MenuNetworking:
      Modified all Show<name of the menu>Menu events; now no longer spawns the widget.

- BP_MP_Button:
      Added variables:
        Default:
            MP_Buttom => MP_Button
            EnableButton => Boolean (default value = True)
      Overrided event BeginPlay; identical to BP_MenuNetworking BeginPlay event.
      Overrided EventTick; enables or disables the button.


Blueprint widgets:
- Modified all VR widgets to work with the multiplayer button and also work on the NoVR_Main_Menu.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/25:

Blueprint widgets:
- MainMenu:
      Modified variables:
        Default:
            HostButton: now it is disabled by default

- ServerMenu:
      Modified variables:
        Default:
            RefreshButton: text changed from Refresh to Find Match
            RefreshButtonEnabled: default favlue changed from False to True
      Modified the system used for hosting joining matches:
        *player no longer can host a match directly, only when no other matches have been found
        *now when searching for sessions if one is not found, create and go to the map
      Modified overrided event EventConstruct; now no longer calls macro RefreshServers.
      Modified macro RefreshServers, Category Default; now calls HostMatch event from MyGameInstance if no sessions are found and sorts session results by ping (not tested).
      Added function SortByPing, Category Default, to sort a BlueprintSessionResult array.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/19:

General:
- Added blueprint widget class EndOfMatchMenu.

Blueprint widgets:
- EndOfMatchMenu:
      Added variables:
        Default:
            RestartMatchButton => UMG Button
            ReturnToMainMenuButton => UMG Button
      Added OnClicked event for RestartMatchButton; sets MotionController_PC Boolean variable MatchRestart to True.
      Added OnClicked event for ReturnToMainMenuButton; returns to Main Menu (when server does it, a network error happens for the client, but then the client goes to the main menu by itself).

Blueprint Classes:
- MotionController_PC:
      Added variables:
        Default:
            MatchRestart => Boolean (default value = False; server only to pass its value to the PlayerState class)
      Added event ClientHandleEndOfMatch, an owning client only RPC; places the EndOfMatchMenu for each player.

- MotionController_PlayerState:
      Added variables:
        Default:
            CanRestartMatch => Boolean (default value = False; when a player wants a rematch, this is set to True)
      Added overrided event Tick; sets CanRestartMatch to the value of the MotionController_PC Boolean variable MatchRestart.

- MultiplayerGameState:
      Added variables:
        Default:
            RestartMatch => Boolean (default value = False; when set to True, restarts the match)
            Temp => Boolean (default value =  False; auxiliary variable during a loop)
      Modified overrided event Tick to also execute when the match state is set to WaitingPostMatch; if both players want to restart the match (see MotionController_PlayerState 
       entry for more details), set RestartMatch to True.

- MyGameInstance:
      Added variables:
        Widgets:
            EndOfMatchMenuWB => EndOfMatchMenu blueprint widget
      Added event ShowEndOfMatchMenu; takes a MotionController_PC variable, necessary to make sure each player has its own.
      Modified macro DisplayErrorMessage, Category Default; now has exec type output.
      Modified overrided event EventNetworkError; now calls event DestroySessionCaller and ShowMainMenu.
      
- MultiplayerGM:
      Modified event PostMatchEvent; now calls MotionController_PC event ClientHandleEndOfMatch to show the menu when the match ends.
      Modified overrided function ReadyToEndMatch; it is activated again.
      Modified overrided event Tick; no longer is used, node has been disconnected.
      Modified overrided event EventOnsetMatchState; now restart match when MultiplayerGameState variable RestartMatch is set to True.
      Added event ResetMatch; sets a timer to check the MultiplayerGameState variable RestartMatch, when set to True, restart the match.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/15:

Blueprint Classes:
- MotionControllerPawn:
      Changed name of macro IsInSilenceMode to IsNotInSilenceMode to better reflect its use.

- BP_WindShield:
      Modified inherited variable RotationOffsetForLeftHand to X =0.0, Y = 0.0, Z = 0.0.
      Modified inherited variable ShouldKeepWorldScaleInverted to True.

- BP_MPMotionController:
      Added variables:
        Spell:
            IsShield => Boolean (default value = False)
      Modified variables:
        Spell:
            ActiveSpell: now replicates with notify
        Default:
            Player: now replicates (solves a refernce problem in macro IsRiftOn)
      Modified function ActivateSpell, Category Spell; now no longer attaches the spell and modify its mesh properties.
      Added function OnRep for ActiveSpell; this function attaches the spell to either attack or shield spawn points and sets its mesh properties for shield or attack.

- MPMotioncontrollerPawn:
      Added event ServerDeactivateAndDestroyActiveSpell, a server only RPC taking a BP_MPMotionController variable; destroys the Actor ActiveSpell and clears its reference.
      Modified bound events RecognitionOnRightConclude and RecognitionOnLeftConclude; they now call ServerDeactivateAndDestroyActiveSpell.
      Changed name of macro IsInSilenceMode to IsNotInSilenceMode to better reflect its use.
      Changed name of event SwapShield to ServerSwapShield to maintain the naming patter with RPCs.
      Modified event ServerInitiateAttack, a server only RPC, to set BP_MPMotionController variable IsShield to False.
      Modified event ServerCastShield, a server only RPC, to set BP_MPMotionController variable IsShield to True.
      Modified event ServerSwapShield, a server only RPC, to set BP_MPMotionController variable IsShield to True.
      Modified event ServerCastAttack, a server only RPC, to check if the player is silenced before executing its intructions.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/14:

Blueprint Classes:
- BP_MPMotionController:
      Added variables:
        Hand:
            ShouldActivateRumble => Boolean (default value = False; is used to turn on and off the loop vibration when casting shield)
      Class now replicates with MinNetUpdateFrequency = 100.0 ms.
      Modified function DeactivateAndDestroySpell, Category Spell, to take an ECastStatus variable.

- BP_Shield:
      Modified implemented interface event OnDamage; now when the life of the shield reaches 0, it stops the rumble.

- BP_BasicAttack:
      Modified overrided event OnComponentHit; now it tests if the object hit is the casting hand, if it is ignores the rest of the event.
      Added macro IsPlayerHand which takes an Actor variable; this macro checks if input Actor is either the PlayerHand or its MP variant.

- MPMotionControllerPawn:
      Modified function DeactivatePlayerSpells, Category Motion Controller, to take an ECastStatus variable.
      Modified event ClientEndMatch, a multicast RPC, to take an ECastStatus variable; when called from MultiplayerGM class, the new input is set to silence.
      Modified event ServerEndMatch, a server only RPC; no longer has a Delay node before silencing the player.
      Modified event ClientEndCast, a multicast RPC; now also disables controller rumble.
      Modified macro ActivateSpell, Category Spell Casting; no longer calls multicast RPC ClientInitiateCast.
      Modified event ServerInitiateCast, a server only RPC; now multicast RPC ClientInitiateCastis called right before macro ActivateSpell.
      Modified event RumbleController to take a Boolean variable; this is used to toggle the rumble on or off.
      Modified event ServerCastShield, a server only RPC; now it sets the BP_MPMotionController variable ShouldActivateRumble to True or False, depending on 
       whether the shield is being casted or destroyed.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/13:

Blueprint Classes:
- MultiplayerGameState:
      Modified overrided event Tick; no longer uses MatchState inherited variable and its switch to determine when the match has ended.

- MPMotionControllerPawn:
      Added event ServerStartMatch which is a server only RPC and sets IsGameOver to False.
      Added function RestartPlayer, Category Player Status, which resets the pawn to its initial conditions (too many input parameters, see its signature in the graph).
      Added event ClientRestartMatch which is a multicast RPC and calls function RestartPlayer.
      Removed function SilencePlayer, Category Motion Controller.
      Added SilenceOrUnsilencePlayer, Category Motion Controller, which takes an ECastStatus variable and sets the controllers to be able to cast or not.

- MultiplayerGM:
      Added variables:
        Match Start:
            MatchRestartMessage => Text (default value = "The fight will start in")
      Added event RestartMatch which just restarts the pawn.
      Modified event PostMatchEvent to set Text variable MatchRestartMessage to "New fight will start in".
      Added overrided event Tick; checks if the match is over and sets MultiplayerGameState Boolean variable GameIsOver to False and calls the events to restart the match.
      Modified function InProgressGameMessageCreator, Category Default, to take both an Integer variable and a Text variable; the Text variable is used to change the 
       message after first match is over.
      Modified function ReadyToEndMatch, Category Game, to no longer do anything when called.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/12:

General:
- Added extra inputs for Action Mappings RecognizeMotionL (shift key) and RecognizeMotionR (shift key).

Blueprint Classes:
- MPMotionControllerPawn:
      Modified event CastAdvancedAttacks; now it is a server only RPC.

- BP_MPMotionController:
      Modified overrided event EventHit; added a SwitchHasAuthority node to make sure only the server can hit and cast the advanced attack.

- BP_AdvancedAttacks:
      Added variables:
        Owner:
           PlayerOwnerMP => MPMotionControllerPawn (used as original PlayerOwner)
      Modified variables:
        Target:
            ProjectileTarget: now replicates
        Owner:
            OwnerHands: now replicates
      Class now replicates and replaicates movement.
      MinNetUpdateFrequency is now set to 100.0ms as BP_BasicAttack, for the same reason.
      Added event ClientPlayExplosion which is a multicast RPC; replicates explosion effect to clients.
      Modified overrided event OnComponentHit; now calls ClientPlayExplosion.

- BP_GEarth01:
      Modified overrided event BeginPlay: 
        *lerping from StartLocation vector to EndLocation now is only done in the authority, i.e. added a SwitchHasAuthority before it being done
        *setting possible owner now has a multiplayer casting added after the MotionControllerPawn casting fails; sets the inherited (from BP_AdvancedAttacks) 
         MPMotioncontrollerPawn to the owner of the object

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/11:

General:
- Added extra inputs for Axis Mappings BarrierDefenseLeft (middle mouse button) and BarrierDefenseRight (middle mouse button).

Blueprint Classes:
- BP_Barrier:
      Class now replicates.
      StaticMeshComponent replicates; necessary to see barrier effects client side.

- MPMotionControllerPawn:
      Modified barrier casting systems:
        *both systems now use server only RPCs to cast the barrier, using the axis value as input
        *sound and rumble now both use multicast RPCs; rumble takes a BP_MPMotionController variable and sound takes aa Actor variable containing the reference to the current barrier being casted
      Added events ServerCastBarrierLeft and ServerCastBarrierRight which are server only RPCs taking a Float variable; these are responsible for the casting.
      Added event ClientRumbleControl which is a multicast RPC taking a BP_MPMotionController variable; this event is reponsible for replicating the rumble to the clients.
      Added event ClientStopSound which is a multicast RPC taking an Actor variable; this event stops the grow sound from playing during the lifetime of the barrier.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/10:

General:
- Added extra inputs for Action Mappings AttackLeft (left mouse button), AttackRight (right mouse button), DefenseLeft (left mouse button) and DefenseRight (right mouse button).

- Added the CycleElements Action Mapping, bound to Tab key.

- Added the LeftSelected (Q key) and RightSelected (E key) Action Mappings.

Blueprint Classes:
- BP_MPMotionController:
      Changed functions ActivateSpell and DeactivateSpell, Category Spell, to no longer set bWantsToCast variable.

- MotionControllerPawn:
      Added macro IsInSilenceMode, Category Spell Casting, which checks if BP_MotionController variable CastStatus is not set to Silence.

- BP_BasicAttack:
      Added events ClientVisualFire, ClientVisualEarth, ClientVisualWind and ClientVisualWater; they are all multicast RPCs and replicate the charge visual effects for each element.
      Added macro ChangeFireEffect, Category Default, to correct the negative scale issues of the left hand when on the client.
      Added event ClientPlayExplosionAndSound which is a multicast RPC to replictate the sound and visual effects when the spell fails.

- BP_MPMotionControllerPawn:
      Added variables:
        No VR Controls:
            LeftSelected => Boolean (default = True)
            RightSelected => Boolean (default = False)
      Modified event ServerSpawnHand; no longer a server only RPC.
      Added function NoVR_CorrectClientPosition, Category NoVR_Utils, which takes a float and rotates the client Pawn to face the server Pawn, when in the client.
      Modified hands spawn process: 
        *ServerSpawnHand no longer is called only by the local player; to maintain its server spawn status, only the authority is allowed to call it.
      Modified the overrided event Tick to no longer update the replicated variables LeftControllerTrans, RightControllerTrans and PlayerBodyTrans.
      Modified the overrided event BeginPlay; now sets a timer to loop every 0.05 seconds and replicate the variables LeftControllerTrans, RightControllerTrans and PlayerBodyTrans.
      Modified the basic attack system:
        *no longer has the tutorial Gate.
        *initiating the attack and casting it are now done by server only RPCs that take BP_MPMotionController variables; this eliminates redunduncy due to having a left and right systems
        *can now be used when no HMD is connected and only the correct hand can cast the attack
        *now sets the BP_MPMotionController variable CastStatus to the correct ECastStatus value when None
        *now uses a new macro to cast the spell which takes an ECastStatus variable and a BP_MPMotionController variable
      Added event ServerInitiateAttack, a server only RPC which takes a BP_MPMotionController variable and an EElementSelected variable and charges the basic attack of the element passes to it.
      Added event ServerCastAttack, a server only RPC which takes a BP_MPMotionController variable and casts the attack.
      Added event ClientInitiateCast, a multicast RPC which takes a BP_MPMotionController variable and sets its bWantsToCast variable to True.
      Added event ClientEndCast, a multicast RPC which takes a BP_MPMotionController variable and sets its bWantsToCast variable to False.
      Modified macro ActivateAttack, Category Spell Casting; no it is called Activate spell, takes both an ECastStatus variable and a BP_MPMotionController 
        variable and no longer sets the BP_MPMotionController CastStatus variable when the spell was successful.
      Modified the basic defense system:
        *no longer has the tutorial Gate
        *casting the shield is done from a server only RPC which takes a BP_MPMotionController variable; this eliminates redunduncy due to having systems for both hands
        *can now be used when no HMD is connected and only the correct hand can cast the attack
        *now sets the BP_MPMotionController variable CastStatus to the correct ECastStatus value when None
        *now uses a new macro to cast the spell which takes an ECastStatus variable and a BP_MPMotionController variable
      Added event ServerCastShield, a server only RPC which takes a BP_MPMotionController variable and an EElementSelected variable and creates a shield of the correct element.
      Modified event SwapShield; now it is a server only RPC taking a BP_MPMotionController variable and an EElementSelected variable.
      Added event ClientVibration, a server only RPC, taking a BP_MPMotionController variable and seting the hands to shake after a delay of 0.3 seconds.
      Modified hit system:
        *shaking and visual update of the health bar is now done through multicast RPCs
        *life is updated through an event
        *when conditions for game over are met, a server only RPC is called to let the server now
      Added event UpdateLife, which takes two Integer variable (the Life varibale the damage value from the hit).
      Added event ClientVibrateCameraAndControllers which is a multicast RPC that activates force feedback on the affected Pawns.
      Added event ClientUpdatePlayerState which is a multicast RPC that takes an Integer variable (the Life variable) and updates the health bar; it also checks if the game is over.
      Added event ServerEndMatch, a server only RPC which sets IsGameOver to True when game over conditions are met.
      Added Input events for Tab key for both the left hand and right hand; cycles through the elements on the selected hand when tab is pressed.
      Added Input events for Q and E keys; when Q is pressed, LeftSelected variable is set to True and RightSelected is set to False; E is the oposite.
      Modified Input event MouseY to avoid inverting vertical axis when on the client.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/06:

General:
- Added new map NoVR_MainMenu which displays the MainMenu widget blueprint.

- Added support for OnlineSubsystemSteam in the DefaultEngine.ini file. This is what allows one to play in Lan or online.

- Added blueprint widget classes MainMenu, HostMenu, ServerMenu, LoadingScreen, ServerRow and ErrorDialog.

Blueprint widgets
- ErrorDialog:
      Added variables:
        Default:
            OkButton => UMG Button
            Message => Text (bound to UMG Text)
      Added OnClicked event for OkButton; displays MainMenu widget.
      Added get and set functions for Message.

- ServerRow:
      Added variables:
        Default:
            ServerSelectionButton => UMG Button
            SearchResults => BlueprintSessionResult (holds the session created when searched for it in the ServerMenu blueprint widget)
            PlayerCounts => Text
      Added function SetServerSearchResult, Category Default; it sets SearchResults and PlayerCounts.
      Added binding functions for UMG Text Server Name, UMG Text Player Count and UMG Text Ping.
      Added OnClicked event for ServerSelectionButton; calls MyGameInstance event JoinServer.

- ServerMenu:
      Added variables:
        Default:
            BackButton => UMG Button
            RefreshButton => UMG Button
            ScrollingServers => UMG ScrollBox (displays found sessions)
            StatusText => Text
            StatusVisibility => ESlateVisibility
            RefreshButtonEnabled => Boolean (default = false; determines when the refresh button can be used)
            FoundSessionWidgets => array of ServerRow blueprint widget (sessions to be displayed)
            FoundSessions => array of BlueprintSessionResult (the actual sessions found)
      Added function ClearPreviousResults, Category Default.
      Added binding function for status messages content; uses StatusText.
      Added binding function for status messages visibility; uses StatusVisibility.
      Added binding function for RefreshButtonEnabled.
      Added macro RefreshServers which clears previous results and performs new searches and disable RefreshButton when searching.
      Added Onclicked event for each UMG Button; BackButton just returns to MainMenu and Refresh calls the macro RefreshServers.
      Overrided event Contruct simply calls RefreshServers.

- HostMenu:
      Added variables:
        Server Settings:
            ServerNameText => Text (not used when connecting via blueprint)
            MaxPlayers => Integer (default = 2)
            NumberOfPlayers => Integer (default = 2)
            EnableAccept => Boolean (default = true; does not change as the AcceptButton is to be always enabled)
        Default:
            UserServerName => UMG TextBox (not used when connecting via blueprint)
            DecreasePlayers => UMG Button (decreases NumberOfPlayers value when clicked; minimum 0)
            IncreasePlayers => UMG Button (increases NumberOfPlayers value when clicked; maximum 2)
            BackButton => UMG Button
            AcceptButton => UMG Button
            GameInstanceReference => MyGameInstance 
      Overrided event Contruct gets used GameInstance and sets GameInstanceReference to its reference.
      Added Onclicked event for BackButton; shows MainMenu.
      Added Onclicked event for AcceptButton; calls MyGameInstance event HostMatchEvent with the defined setting.
      Added Onclicked event for DecreasePlayers.
      Added Onclicked event for IncreasePlayers.
      Added OnTextChanged event for UserServerName; not used.
      Added binding function GetNumberOfPlayersText; converts NumberOfPlayers to Text.

- MainMenu:
      Added variables:
        Default:
            FindButton => UMG Button
            HostButton => UMG Button
            QuitButton => UMG Button
            ToggleLanButton => UMGButton
            GameInstanceReference => MyGameInstance 
      Overrided event Contruct gets used GameInstance and sets GameInstanceReference to its reference.
      Added Onclicked events for all buttons; FindButton shows ServerMenu, HostButton shows HostMenu, QuitButton quits 
        the game and ToggleLanButton changes MyGameInstance variable EnableLan to true or false.

Blueprint Classes:
- MyGameInstance:
      Added variables:
        Server Settings:
            EnableLan => Boolean (default = true)
            ServerName => Text (not used for anything for now)
            MaxPlayers => Integer (default = 2)
        Widgets:
            MainMenuWB => MainMenu blueprint widget
            HostMenuWB => HostMenu blueprint widget
            ServerMenuWB => ServerMenu blueprint widget
            ServerRowWB => ServerRow blueprint widget
            LoadingScreenWB => LoadingScreen blueprint widget
            ErrorDialogWB => ErrorDialog blueprint widget
      Added events to display each of the new blueprint widget classes.
      Added macro DisplayErrorMessage which displays ErrorDialog widget and sets the error message.
      Added HostMatchEvent event which creates a multiplayer session.
      Added JoinServer which joins a created session.
      Overrided NetworkError from GameInstance; handles network errors.
      Overrided TravelError from GameInstance; handles travel errors.
      Added NetErrorToText pure function to get network error code and create a text out of it.
      Added TravelErrorToText pure function to get travel error code and create a text out of it.

- MPMotionControllerPawn
      Added variables:
        Replication:
            LeftControllerTrans => Transform (replicated with notify)
            RightControllerTrans => Transform (replicated with notify)
            PlayerBodyTrans => Transform (replicated with notify)
      Modified variables:
        Controllers:
            LeftController: now replicates
            RightController: Now is a BP_MPMotionController and replicates
      Changed all references to BP_MotionController to BP_MPMotionController when dealing with the RightController.
      Changed function SetInitialConditions; initial elements are no longer set in the function (casting is disabled to avoid problems)
      Changed ServerStartMatch RPC; hands are silenced now by default.
      Modified hands spawn process: 
        *now uses SwitchOnDevices to decide if it is using the HMD or not
        *hands now spawn on the server and the RPC can only be called if caller is locally controlled
      Added ServerSpawnHand RPC (server only) which spawns the hands
      Added function AttachHands, Category Network, which attaches hands to MotionControllerL or R if HMD is in use or the PlayerBody; called from ServerSpawnhand.
      Added ServerGetLocationsAndRotations RPC (server only); sets the replicated transforms
      Added function UpdateServer, Category Network, which passes the transforms of MotionControllerl and R and PlayerBody, when the pawn is locally 
        controlled, to ServerGetLocationsAndRotations RPC.
      Added functions OnRep for LeftControllerTrans, RightControllerTrans and PlayerBodyTrans; when the pawn is not locally controlled, set the new position and rotation.

- BP_MPMotionController:
      Now replicates.

===================================================================================================================================================================
Changes made to branch 4.16 on 2017/07/05:

General:
- Added new map MultiplayerArena with two oposing PlayerStart objects; nothing in the level blueprint runs now.

- GoogleVR and SimpleHMD are disabled by default; used when playing whithout the HMD (testing only).

- Option to start in VR disabled by default now; option located in Project Settings -> Description -> Settings.

- Added Blueprint classes MultiplayerGM (GameMode child), MultiplayerGameState, (GameState child), MotionController_PC (PlayerController child),
  MotionController_PlayerState (PlayerState child), Multiplayer_PanelText_BP (PanelText_BP child), 
  Multiplayer_MotionControllerPawn (Pawn child) e Multiplayer_BP_MotionController (Actor child).

Blueprint classes:
- MultiplayerGM: 
     Added variables:
         Player Spawning:
           Player1 => Array of PlayerStart
           Player2 => Array of PlayerStart
           CurrentPlayerStartTransform => Transform (used when spawning the text for each player)
         Player Login:
           PlayerControllerList => Array of MotionController_PC
           InvertedIterator => Integer (server to iterate PlayerControllerList backwards)
           WaitingToStartMessage => Text (default = "Waiting for other player to join.")
         Match Start:
           Countdown => Integer
           StartFight => Float (defautl = 10.0)
         Defaut:
           MaxPlayers => Integer
     Added RespawnPlayerEvent event for spawning each player using PlayerStart; this is a RPC that runs only on the server.
     Added OnPostLogin event calling the spawning event and the CLientPostLogin event from the MotionController_PC.
     Overrided HandleStartingNewPlayer from GameModeBase; this server to fill MotionController_PC array with each PlayerController used in the match.
     Added event SetPlayerTarget which sets the replicated Multiplayer_MotionControllerPawn variable EnemyTarget for each player.
     Added InProgressEvent which sinchronizes the countdown to the start of the match and allow the players to cast spells when the match starts (not working yet).
     Overrided OnSetMatchState from GameMode; when MatchState (GameMode inherited) is InProgress set the target for each player prepare to start the match; 
       when match has ended, handles silencing the players and displaying messages for the loser and winner.
     Added PostMatchEvent which disables casting for each player and displays "You are victorious!" for the winner and "You are defeated!" for the loser.
     Overrided functions ReadyToStartMatch and ReadyToEndMatch from GameMode, Category Game; the first checks is all players have joined the match and the second returns 
       the MultiplayerGameState variable GameIsOver.
     Added function InProgressGameMessageCreator, Category Default, to set the countdown message to MotionController_PC replicated variable MatchFlowMessage.

- MultiplayerGameState:
      Added variables:
          Default:
            GameIsOver => Boolean (default = false)
      Overrided Tick event which only ever runs when GameState variable MatchState is InProgress and sets GameIsOver to true if any MotionController_PlayerState reports defeat.

- MotionController_PC:
      Added variables:
          Default:
            GameText => Multiplayer_PanelText_BP (holds a reference to the spawned Multiplayer_PanelText_BP instance)
            MatchFlowMessage => Text (replicated with Notify)
      Added function OnRep_MatchFlowMessage, Category Default, to set Multiplayer_PanelText_BP variable WinLoseText (inherited from PanelText_BP).
      Added function AreYAndYawZero, Category Game Text.
      Added function CreateGameTextTransform, Category Game Text, which gets the Pawn transform to determine the direction the text should be facing.
      Added ClientPostLogin event, which takes the Pawn transform when it was spawned and uses it to spawn Multiplayer_PanelText_BP.

- MotionController_PlayerState:
      Added variables:
          Default:
            PlayerIsDefeated => Boolean (default = false)

- Multiplayer_PanelText_BP:
      Overrided BeginPlay event which now sets visibility of the text, its color and its content.
      Overrided Tick event which sets the content of the text.

- Multiplayer_MotionControllerPawn:
      Modified variables:
          Game Over:
            IsGameOver: now replicates with Notify
      Added two MotionController components.
      Implemented MouseX and MouseY axis input events; camera can be moved with mouse now (GoogleVR and SimpleHMD plugins must be disabled).
      Added ClientStartMatch multicast event; allows players to cast spells.
      Added ClientEndMatch multicast event; disables casting.
      Added function OnRep_IsGameOver, Category Default, which sets MotionController_PlayerState variable PlayerIsDefeated to true when it is true.
      Multiplayer_MotionControllerPawn now accepts PlayerController Yaw and Pitch movement.
      Multiplayer_MotionControllerPawn no longer replicates its movement by default.
